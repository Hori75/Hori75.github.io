<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-03-21T00:08:43+07:00</updated><id>/feed.xml</id><title type="html">Hori75’s Blog</title><subtitle>Uncommon logs of Hori75, created out of necessities or experience of random events.</subtitle><entry><title type="html">Refactoring a React Project</title><link href="/softengproject/2022/03/20/refactoring-react.html" rel="alternate" type="text/html" title="Refactoring a React Project" /><published>2022-03-20T22:00:00+07:00</published><updated>2022-03-20T22:00:00+07:00</updated><id>/softengproject/2022/03/20/refactoring-react</id><content type="html" xml:base="/softengproject/2022/03/20/refactoring-react.html"><![CDATA[<p>Initializing react project and working from there could be messy.
<!--more-->
Not only you have to setup from scratch, you have to build components itself.
If not organized, the code could be turned into a mess due to javascript doesn’t care the project structure itself.</p>

<p>In this post, I’d like to share my story on working a project and refactoring process.</p>

<h3 id="starting-project">Starting Project</h3>

<p>At the start of development, I initialized the project from <a href="https://create-react-app.dev/">Create React App</a>.
Then the CI/CD and the server is setup, but this is out of scope on this post.</p>

<p>Actually, there are few member from the team that just started working on react.
They are learning on the fly and the project was just an initial from Create React App.
So the results are a bit messy from my own view.</p>

<p><img src="/images/refactor1.png" alt="Example of code" /></p>

<p>Apart from that, we still use javascript and haven’t used linter.
So I planned to refactor so they could work on it properly.</p>

<h3 id="using-typescript">Using Typescript</h3>

<p>The first step is to use Typescript. The reason behind that is to create more strictier.
Why we need more strictier rule, because javascript is so flexible, it won’t check the type expected on function.
Other than that, we would like to prevent more errors that could be avoided by strictier rule.</p>

<h3 id="applying-eslint">Applying Eslint</h3>

<p>Second step is to apply eslint. It’s easy to initialize the project.
You could set it to check for warning, syntax errors, and enforce a codestyle.
Also, there is a popular codestyle you could pick to follow. 
The one annoying thing is that I have to disable preflight check so the conflicting dependencies doesn’t block any action.
So far, there isn’t any problem regarding the conflicting packages.</p>

<h3 id="seperate-the-component-concerns">Seperate the Component Concerns</h3>

<p>I reorganize the components so other team members could work on the code more orderly.
This is done by seperating the client (to get backend data), models (to set types of data), and Layouts 
(which contains only MainLayout for now).</p>

<p><img src="/images/refactor2.png" alt="Example of structure" /></p>

<p>Apart from that, I also seperate the routing from the <code class="language-plaintext highlighter-rouge">App.tsx</code> so the we won’t need to make changes on the file.</p>

<p>Heres what is like, more or less</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import React from 'react';
import { Route, Routes } from 'react-router-dom';
import {
  ...
} from './components';

const Router = () =&gt; {
  return (
    &lt;Routes&gt;
      &lt;!-- insert route here --&gt;
    &lt;/Routes&gt;
  );
};
export default Router;
</code></pre></div></div>

<p>The next step to be (hopefully) done on the project is to seperate other smaller components from a page so we could reuse it.
After that, the page component shall be moved to it’s own directory.</p>

<h3 id="advice-came-too-late">Advice came too late</h3>

<p>While I was complaining about react’s weird coverage report file, my friend actually recommended me to use nextjs instead of
the vanila <code class="language-plaintext highlighter-rouge">create-react-app</code> to initialize the project. I haven’t done it because it’s the first time setting up a react project.
One of the advantages I see are it’s routing system are completely based on <code class="language-plaintext highlighter-rouge">pages</code> directory, so we don’t really need to create our own.</p>

<h3 id="lesson-learned">Lesson Learned</h3>

<p>When initializing a project is simple enough. The structure must be set properly and hence the refactor was done so other team 
members who new to react could work on it more easily.</p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[Initializing react project and working from there could be messy.]]></summary></entry><entry><title type="html">Clean Code</title><link href="/softengproject/2022/03/20/clean-code.html" rel="alternate" type="text/html" title="Clean Code" /><published>2022-03-20T21:00:00+07:00</published><updated>2022-03-20T21:00:00+07:00</updated><id>/softengproject/2022/03/20/clean-code</id><content type="html" xml:base="/softengproject/2022/03/20/clean-code.html"><![CDATA[<p>Is your code readable?
<!--more-->
On your first time learning to code or a new framework, you might not need to write the good code.
Why? Because it’s for your learning only. When you start to work on a project with others,
you might be told to follow a guideline or a convention. When working with others, your work
must be reviewed by others or you must wrote your idea to communicate it with others.
This is might be done in other way, the thing is, the code should be readable by others to make it maintainable.</p>

<h3 id="what-is-clean-code">What is Clean Code?</h3>

<p>Clean code is a readable, maintanable, and well-written code. It has its following characteristics:</p>

<ul>
  <li>Other developers could understand it quickly</li>
  <li>Don’t have too many duplications</li>
  <li>Contains minimal classes and method, and</li>
  <li>Works as expected (obviously)</li>
</ul>

<p>This characteristics then implies the code is readable and could be fixed quickly in case there is a semantic bug.</p>

<h3 id="why-its-needed">Why it’s needed?</h3>

<p>As previously stated, when working with others, having a clean code makes life easier for the team.
Imagine you work on a poorly written code, the code is not formatted properly, there are too many methods or classes.
The easiest way is to ask someone who created the code. But, what if they already left the team for good.
This means that you need to decipher the code purpose and take a while to understand, and what if you forget it again.
That is why clean code was needed when working in teams, you also could do it on your own code and gain benefit from it.</p>

<h3 id="when-to-refactorclean">When to refactor/clean?</h3>

<p>There are several principles on when or what to refactor.</p>

<h4 id="dont-repeat-yourself-dry">Don’t Repeat Yourself (DRY)</h4>

<p>As it said, you shouldn’t create duplicate codes. 
In order to avoid duplication, you should create abstraction of the repeated process.
But sometimes, too much abstractions could make the code more unreadable.
This is the downside of this principle and the following principle is created to ease this.</p>

<h4 id="write-everything-twice-wet-rule-of-three">Write Everything Twice (WET)/ Rule of Three</h4>

<p>This principle gives more flexibility in order to prevent over abstractions.
You could write it twice but if you write the same thing the third time, you need to refactor.
Same as before, you could create abstraction of the repeated process.</p>

<h4 id="you-arent-gonna-need-it-yagni">You Aren’t Gonna Need It (YAGNI)</h4>

<p>When you write the code, the code should have its purpose in a workflow.
Otherwise, you actually aren’t gonna need it and you should remove it.
By thinking this way, we could prevent unnecessary codes in the first place.</p>

<h4 id="keep-it-simple-stupid-kiss">Keep It Simple Stupid (KISS)</h4>

<p>A phrase from long time could be applied while writing the code.
If the implementation is really complex, you should think again to see if there is other simpler way.
Writing the simpler code means simpler workflow and could be checked easily for bugs.</p>

<h4 id="etc">Etc</h4>

<p>Also, there are several times you might need to refactor the code</p>

<ul>
  <li>refactor when adding new feature</li>
  <li>refactor when fixing bugs</li>
  <li>refactor in code review</li>
</ul>

<h3 id="how-to-refactorclean">How to refactor/clean?</h3>

<p>While cleaning the code, there are checklists to check whenther you have refactor it properly or not.</p>

<ul>
  <li>Code should be cleaner (obviously)</li>
  <li>No new functionality from the changes</li>
  <li>Existing tests should pass</li>
</ul>

<p>The work that needs to be done depends on reason refactoring is needed.
Might be to eliminate code duplication or to completely reimplement the flow.</p>

<p>Aside from cleaning from semantic mess, you could [literally] tidy the code by following a certain codestyle.
In that way, your codestyle is consistent and more readable.</p>

<h3 id="conclusion">Conclusion</h3>

<p>The principles of clean code are flexible and there aren’t clear and strict rules.
but it should be implemented in order to have readable and maintainable code.</p>

<h3 id="reference">Reference</h3>

<p>For more guides and techniques of refactoring, you could learn quickly from <a href="https://refactoring.guru/refactoring">Refactoring Guru</a></p>

<p>If you want a well written guideline and principles, you could read <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code book by Robert C. Martin</a></p>

<p>Thumbnail comic: <a href="https://xkcd.com/1513/">xkcd: Code Quality</a></p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[Is your code readable?]]></summary></entry><entry><title type="html">DevOps on Software Engineering Project</title><link href="/softengproject/2022/03/20/devops-in-software-engineering-project.html" rel="alternate" type="text/html" title="DevOps on Software Engineering Project" /><published>2022-03-20T15:42:00+07:00</published><updated>2022-03-20T15:42:00+07:00</updated><id>/softengproject/2022/03/20/devops-in-software-engineering-project</id><content type="html" xml:base="/softengproject/2022/03/20/devops-in-software-engineering-project.html"><![CDATA[<p>Quick pace development demands quick deployment and delivery of the products.
<!--more-->
Nowadays, changes in the application makes deployment needed to be done in automated and quick manner.
This has to be done in order to fulfill the demand on time.
Here’s my grasp on automating the deployment and integration process.</p>

<h3 id="overview-of-devops">Overview of DevOps</h3>

<p>Usually, DevOps represents a collaboration between the Development and Operation process in order to deploy code
 into production environment. This collaboration dedicates on creating an automated and fast way to deploy the code.
DevOps is important for enterprises that needs to deliver product faster to be competitive.
This demands a collaboration between development, operations, and business teams so the development could be done 
in timely manner.</p>

<p>In practice, DevOps includes some common practices done and its examples.</p>

<h4 id="collaborative-development">Collaborative Development</h4>

<p><img src="/images/gitlab-page.png" alt="Gitlab Page" width="800" /></p>

<p>In order to develop product quickly, we should enable other team member to work pararelly.
This is usually done by using a remote host to store source code and version control system.</p>

<p>The most common example here is using popular code hosting platform such as <a href="https://github.com">Github</a>, 
<a href="https://bitbucket.org">BitBucket</a>, <a href="https://gitlab.com">Gitlab</a>, etc.
You could host your own code hosting platform (for example, <a href="https://about.gitlab.com/install/">host Gitlab on your own server</a>)
but it might costs too much in the early development. 
The code hosting platform should be operational and reliable to maintain, 
so you could have used available hosting platform instead.</p>

<h4 id="continuous-integration-and-deployment">Continuous Integration and Deployment</h4>

<p><img src="/images/pipeline.png" alt="Continuous Integration and Deployment" width="800" /></p>

<p>This is where DevOps dedicated most. 
During the integration process, the source code should be built and tested before deployed to production.
Due to high volume of work done from the development, the process should be done in automated way.</p>

<p>Usually, the automation is available on code hosting platform as a feature.
Also, there are many services that provide automation platform, such as <a href="https://travis-ci.org">Travis CI</a>, 
<a href="https://circleci.com">Circle CI</a>, etc.
But, it might be limited due to be demanding in terms of computational cost and enermous amount of jobs need to be done pararelly.
You could use either free in limited way or find the cheapest and most reliable.
The other way is to host your own CI/CD runner like <a href="https://docs.gitlab.com/runner/">Gitlab Runner</a>
provided for Gitlab servers or <a href="https://www.jenkins.io/">Jenkins</a>.</p>

<p>As for deployment, there are many Platform as a Service (PaaS) services that provide platform to be manage by ourselves.
The example of it are <a href="https://www.heroku.com/">Heroku</a>, <a href="https://www.digitalocean.com/">Digital Ocean</a>, 
<a href="https://cloud.google.com">Google Cloud Platform</a>, etc. You could utilize any platform as you like.
Take note that there are few things needed to setup in order to make a fully operational web application, 
such as, setting up how the application runs or replaced by the newer build.</p>

<h4 id="continuous-monitoring">Continuous Monitoring</h4>

<p><img src="/images/grafana.png" alt="Monitoring" width="800" /></p>

<p>After deployment to production, we should check if the server works properly and could fulfill the demand.
We also need to check what happened on the service when something wrong happened.
This is what app logs are used for, but you need to be able to read it easily,
especially when you already have many servers operational.
The problem also apply on checking performances on the servers.</p>

<p>The tools you can use are <a href="https://grafana.com/">Grafana</a>, <a href="https://prometheus.io/">Prometheus</a>, etc.
The monitoring tools should be able to provide access to performance graph, app logs, and alerts.</p>

<h3 id="conclusion">Conclusion</h3>

<p>DevOps has become the important part on software engineering projects. 
It happens due to the increase of competitive companies that needs to deliver product in time.
This also make software development and deployment more easier and faster.
But we should remember, the team needs to be adaptive in order to be able to adopt DevOps practices in beneficial way.</p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[Quick pace development demands quick deployment and delivery of the products.]]></summary></entry><entry><title type="html">Agile Manifesto and its implications on Scrum</title><link href="/softengproject/2022/02/28/agile-manifesto-and-its-implications-to-scrum.html" rel="alternate" type="text/html" title="Agile Manifesto and its implications on Scrum" /><published>2022-02-28T20:50:00+07:00</published><updated>2022-02-28T20:50:00+07:00</updated><id>/softengproject/2022/02/28/agile-manifesto-and-its-implications-to-scrum</id><content type="html" xml:base="/softengproject/2022/02/28/agile-manifesto-and-its-implications-to-scrum.html"><![CDATA[<p>Agile is the most frequent word I see when learning about modern software engineering.
<!--more-->
This word refers to Agile development that specializes at responding to changes in order to satisfy needs in rapid pace.
But, in some articles/guides, Agile Development is only a set procedures created to rapidly get features done.
We should (or must) learn the principles of Agile from it’s reference, <a href="https://agilemanifesto.org/">Agile Manifesto</a>.</p>

<h3 id="what-is-agile-manifesto">What is Agile Manifesto</h3>

<p>Before the manifesto, there are various agile principles (such as extreme programming, pair programming, etc) created from the 1970s.
In early 2001, a group of 17 developers created the manifesto in 2 meetings on Oregon and Snowbird, Utah.
The explosion of personal computers creates huge demands and significant changes.
The lag of time in developing software to fulfill needs creates frustation with the tradtional methodology of the 1990s. 
The manifesto is created to encourage developers to speed up processes and work on practices that focuses more directly to the users.</p>

<p>The values of Agile Manifesto:</p>
<ul>
  <li>Individuals and interactions over processes and tools</li>
  <li>Working software over comprehensive documentation</li>
  <li>Customer collaboration over contract negotiation</li>
  <li>Responding to change over following a plan</li>
</ul>

<p>The <a href="https://agilemanifesto.org/principles.html">Twelve principles of Agile Manifesto</a> largely taught about developer should be 
able to accept changes and create deliverables on quick pace. This means that developer should work closely with the stakeholders
in order to quickly deliver a working feature for efficency and competitive advantage. The principles also needs a regular 
reflection on how to become more effective and adjusts its behaviour to conform with the reflection.</p>

<h3 id="how-scrum-is-created-to-be-agile">How Scrum is Created to be Agile</h3>

<p>The scrum process is drawn in different and sometimes large graphs.
But they share the common ideas on mechanism and meetings.
Here is the common example of it.</p>

<p><img src="/images/scrumorg-scrum-framework-3000.png" alt="Scrum Process" width="800" /></p>

<h4 id="product-backlog">Product Backlog</h4>

<p>Product Owner is responsible to create product backlogs in scrum process. 
This product backlogs could be added later after a sprint is done.</p>

<h4 id="sprint-planning">Sprint Planning</h4>

<p>In Sprint Planning, the team gather to sort the backlogs of the effort required and decide what to work on in the beginning.
This generates a sprint backlog, the tasks targetted to be done at the end of the sprint.</p>

<h4 id="sprint">Sprint</h4>

<p>On the Sprint, a regular meeting is set to address teams completion, next tasks, and its impedance.
From the regular meeting, product owner could adjust the sprint backlog and assign the backlog to the member who has finished previous backlog.
Aside from that, the team needs to be working on the implementation so that the aim of the sprint is completed.</p>

<h4 id="review-and-retrospective">Review and Retrospective</h4>

<p>Once a sprint is finish, either the aims are fulfilled or not, the team gather for a review.
In the review, the team needs to evaluate and plan an improvement on the next sprint.
The sprint backlog that hasn’t been finished will be carried on next sprint.</p>

<h4 id="repeat">Repeat</h4>

<p>The work is then repeated indefinitely. The team grows and adapts to the scrum as member joins or leaves over time.</p>

<h3 id="alternative-of-scrum-scrumban">Alternative of Scrum (Scrumban)</h3>

<p>Despite the agility of scrum, there are some objections to scrum as an agile development framework:</p>

<ul>
  <li>Strict rules of meetings and sprint</li>
  <li>Meetings that could take longer time</li>
  <li>Fixed length of sprint</li>
  <li>etc</li>
</ul>

<p>There is a hybrid Scrum that could address those issues called <a href="https://www.agilealliance.org/scrumban/">Scrumban</a>.
This framework utilizes a board called <em>kanban</em> to organize tasks/backlogs to be work and done.</p>

<p><img src="/images/scrumban-kanban.jpg" alt="Scrumban's kanban" /></p>

<p>The purpose of this <em>kanban</em> is to provide the best next thing to work on by the team.
The daily meeting is kept and could be done asynchronously.
Instead of planning and retrospective, scrumban only needs a meeting to address the tasks on the <em>kanban</em>.
It’s easier and more adaptable for new joiners to work on the team.</p>

<p>The decision whether the team should use Scrumban instead is up to the team preferences.
These are frameworks to apply and adapt with agile principles in mind.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Scrum framework should be executed with agile principles in mind.
The agility of the team depends on how quick the development and how open they are to quick changes.</p>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://agilemanifesto.org/">The Agile Manifesto</a></li>
  <li><a href="https://www.scrum.org/resources/what-is-scrum">What is Scrum</a></li>
  <li><a href="https://www.agilealliance.org/scrumban/">What is Scrumban</a></li>
</ul>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[Agile is the most frequent word I see when learning about modern software engineering.]]></summary></entry><entry><title type="html">User Persona in User Centered Design</title><link href="/softengproject/2022/02/28/user-persona-in-user-centered-design.html" rel="alternate" type="text/html" title="User Persona in User Centered Design" /><published>2022-02-28T18:45:00+07:00</published><updated>2022-02-28T18:45:00+07:00</updated><id>/softengproject/2022/02/28/user-persona-in-user-centered-design</id><content type="html" xml:base="/softengproject/2022/02/28/user-persona-in-user-centered-design.html"><![CDATA[<p>User Persona is an important tool for designing and working on User Experience projects.
<!--more-->
In User Centered Design, we often stumble upon a user persona.
User Persona is used as an consideration for a designer to create effective User Interface for specific user type.
There are many sites that give user persona templates to be used either free or proprietary.
But you should know what does a User Persona have in common.</p>

<h3 id="what-is-user-persona">What is User Persona</h3>

<p>User Persona is a preview of a specific stereotype of a user. 
These user stereotypes should be large enough to represent a majority of the users.
But, this shouldn’t restrict designers to have just one user persona, you create many user personas if needed.
The other consideration in deciding which user stereotype to pick is what role the users have on the product.
They might be small in quantity but have critical role in the product.</p>

<h3 id="important-role-of-user-personas">Important Role of User Personas</h3>

<p>As stated in the beginning, User Persona is used as an consideration for the decisions in designing User Experience.
It also helped the priortization of features throughout the development process.
User Personas also could help other stakeholders to create better decision based on the user stereotypes. 
(hence, the design process is called User Centered Design)</p>

<h3 id="what-does-a-user-persona-contains">What does a User Persona Contains</h3>

<p>User Persona commonly use fictional name and have following info:</p>
<ul>
  <li>Job titles and major responsibilities</li>
  <li>Demographics such as age, education, ethnicity, and family status</li>
  <li>The goals and tasks they are trying to complete using the site</li>
  <li>Their physical, social, and technological environment</li>
  <li>A quote that sums up what matters most to the persona as it relates to your site</li>
  <li>Casual pictures representing that user group</li>
</ul>

<p>Sometimes, you might have little time to design and these info couldn’t be fulfilled.
The minimum requirement for user persona is that you could explain the user stereotype’s goal, tasks, and pain points related to the product.</p>

<p>The good example is our work on Software Engineering Project subject. 
Our team is working project on a software aimed to report and save records of students that violate academic rules.
We only have 1 week to create user personas for both Student and Lecturer.
We brainstorm on information we have about respective stereotypes.
Here’s the user persona about lecturer stereotypes, you could see we only wrote the bio, goals, and frustrations. (despite in different language)</p>

<p><img src="/images/UserPersonainUserCenteredDesign-image.png" alt="Example of User Persona" width="800" /></p>

<p>In my opinion, this is already a user persona and we could take use information to decide on design decisions.</p>

<p>In the best practice, we gather these informations by conducting a user research, summarize or condense the research, brainstorming, refining, and making it realistic.</p>

<h3 id="what-to-ask-during-user-research">What to Ask during User Research</h3>

<p>We should generally ask about user’s description, motivations to use your product, and their aim by using your product.
If there is a popular product to refer, use it to gain more information related to their preferences and pain points.
You should interview more users in order to gain more general information related to a stereotype.
The users you asked must be within the scope of users your product aimed for.</p>

<h3 id="user-persona-layout-and-formatting">User Persona Layout and Formatting</h3>

<p>Aside from the template our team used, there are many templates available online.
You could use any templates you like, I’m not fond of recommending a certain template.
But with this knowledge, you might could create your own template.
It doesn’t need to be fancy but it should be readable and could represent the user stereotype well.</p>

<h3 id="conclusion">Conclusion</h3>

<p>User Persona is an effective tool to create User Interface that conform the specific user needs.
Without it, we wouldn’t be able to focus on the stereotypes of users your product aimed for.</p>

<h3 id="reference">Reference</h3>

<p><a href="https://www.usability.gov/how-to-and-tools/methods/personas.html">Personas from Usability.gov</a></p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[User Persona is an important tool for designing and working on User Experience projects.]]></summary></entry><entry><title type="html">Test Driven Development (ignored) Main Thing</title><link href="/softengproject/2022/02/28/test-driven-development-ignored-main-thing.html" rel="alternate" type="text/html" title="Test Driven Development (ignored) Main Thing" /><published>2022-02-28T13:00:00+07:00</published><updated>2022-02-28T13:00:00+07:00</updated><id>/softengproject/2022/02/28/test-driven-development-ignored-main-thing</id><content type="html" xml:base="/softengproject/2022/02/28/test-driven-development-ignored-main-thing.html"><![CDATA[<p>(SPOILER ALERT) It’s not 100% coverage.
<!--more--></p>

<p>While learning programming and software engineering, I found this principle called “Test Driven Development”.
This principle is enforced on all assignments so me and my friends pretty much use it.
The main problem I found is that, the assignment was about creating a blog like web so I don’t really know what to test.
That problem got cleared up when I worked on an assignment to create a proper webapp [with database].
But, the next problem is the targetted coverage across all of my assignments are 100%.
I felt obliged to create test for every single line of code.</p>

<p>“Does it really used?”, I wonder. So I asked my friend who has internship as a software engineer.</p>

<p>“Nah, you just need to test if it works. If you could use unit test, use it.”</p>

<p>The main thing is, every company has its own stance about it.
But they don’t really enforce to reach 100% coverage and such.
Also, there is an argument against Test Driven Development.
Does Test Driven Development main principle is ignored?</p>

<h3 id="definition">Definition</h3>

<p>Test Driven Development is a principle where you create tests first before create the implementations.
This is further elaborated (at least in my assignments) in creating <code class="language-plaintext highlighter-rouge">RED</code>, <code class="language-plaintext highlighter-rouge">GREEN</code>, and <code class="language-plaintext highlighter-rouge">REFACTOR</code> commits.
But, <strong>you don’t have to follow this since it’s only a principle not a rule.</strong></p>

<p><img src="/images/tdd-example.png" alt="TDD commits" /></p>

<h4 id="red">RED</h4>

<p>In <code class="language-plaintext highlighter-rouge">RED</code> phase, you create skeleton objects and unit tests first in order to make the tests fail (hence it’s named <code class="language-plaintext highlighter-rouge">RED</code>).
You must not create implementation of the code, only empty class and functions are allowed.</p>

<h4 id="green">GREEN</h4>

<p>In <code class="language-plaintext highlighter-rouge">GREEN</code> phase, you start create the main implementations and aim to pass all tests.
How much you need to implement it’s up to you, just get the test passed or do the proper and good implementations.</p>

<h4 id="refactor">REFACTOR</h4>

<p>In <code class="language-plaintext highlighter-rouge">REFACTOR</code> phase, you could evaluate your code and refactor it when necessary.</p>

<h4 id="repeat">Repeat</h4>

<p>After all of these, you repeat the process again by creating a failing test. Repeat until the project is completed.</p>

<h3 id="advantages">Advantages</h3>

<p>Test Driven Development is quite useful when you have a clear minimum acceptance criteria. 
This will set your initial tests to be passed and you could build your test from there.
The main advantages from this is to make sure that your code has been tested.
The more code it covers, the lesser bug or errors you need to fix.</p>

<h3 id="main-objection-about-tdd">Main Objection about TDD</h3>

<p>The rapid phase of Test Driven Development is that you will do bad code practices in order to just fulfill the test.
Apart from that, we could create way too many lines of code just for unit testing instead of the real implementations.
This could get really worse when “100% coverage” is set as a requirement as it will force you to create code to test every inch of code you create.
The main thing is that you might create more tests than needed and even create technical debts you need to pay later on.</p>

<h3 id="what-is-missed-from-tdd">What is Missed from TDD</h3>

<p>First of all, we need to acknowledge that code coverage has no meaningful correlation code quality.
Coverage reports are created to detect any code flow that we left untested.
We need to remember that unit tests are created to give confidence that the code is working properly as intended if the test passed.
It’s main purpose is to make sure others’ changes don’t break the flow of the program.
The (ignored) main thing is Test Driven Development should be done to test <strong>the code behaviours, not all the implementations</strong>.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Test Driven Development is useful to shape developer’s habit to create test for code behaviour.
But this often to be overlooked and oversimplified to become rules that restrict the developer itself.
Code coverage shouldn’t be the main requirement for code quality, we only need to check if there is a code flow that isn’t covered yet.</p>

<h3 id="reference">Reference</h3>

<p>You could check out Kent Beck’s book on <a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">Test Driven Development: By Example</a>
if you would like to learn more on Test Driven Development.</p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[(SPOILER ALERT) It’s not 100% coverage.]]></summary></entry><entry><title type="html">Git Guide or Cheatsheet or Whatever</title><link href="/softengproject/2022/02/27/git-guide-or-cheatsheet-or-whatever.html" rel="alternate" type="text/html" title="Git Guide or Cheatsheet or Whatever" /><published>2022-02-27T22:45:00+07:00</published><updated>2022-02-27T22:45:00+07:00</updated><id>/softengproject/2022/02/27/git-guide-or-cheatsheet-or-whatever</id><content type="html" xml:base="/softengproject/2022/02/27/git-guide-or-cheatsheet-or-whatever.html"><![CDATA[<p>Git is a common version control used on Software Engineering projects.
<!--more-->
You could see that every projects maintained online used git in majority.
Learning git is a necessity if you would like to work in a codebase maintained by a group or company.
This post currates a list of common knowledge and guide I found and followed.</p>

<h3 id="overview-of-git">Overview of Git</h3>

<p>A codebase is stored in a <strong>repository</strong> either local or on a remote server.
In the repository, there is a <strong>“main” branch</strong> that represents the current progress or release.
The repositories often have many branches of others.
You save your progress by creating a <strong>commit</strong> consists of your changes into a branch.
You could <strong>branch</strong> from other branch and <strong>merge</strong> a branch into other branch.</p>

<p>With git, you could work on a task alongside with others’ work in the same codebase.
This is important as you need to store your own work and merge with the rest of others’ work in a good way.</p>

<h3 id="git-remote-server">Git Remote Server</h3>

<p>There are sites that host remote repositories such as <a href="https://github.com">github</a>, <a href="https://gitlab.com">gitlab</a>, etc.
These sites have utility features such as continous integration/deployment (CI/CD) and merge request that can be reviewed by others.</p>

<h3 id="commands-of-git">Commands of Git</h3>

<p>This is a list of git commands I have used.</p>

<h4 id="initializing-a-repository">Initializing a Repository</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git init</code></pre></figure>

<p>This command is used to initialize a local repository. The <code class="language-plaintext highlighter-rouge">.git</code> folder is initialized by this command.</p>

<h4 id="cloning-a-remote-repository">Cloning a Remote Repository</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git clone &lt;remote_url&gt; &lt;target_dir&gt;</code></pre></figure>

<p>This clones a remote repository into a folder. An origin remote is set to able to pull and push to the remote repository.</p>

<h4 id="setting-remote-repository">Setting Remote Repository</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git remote add &lt;remote_name&gt; &lt;remote_url&gt;
git remote set-url &lt;remote_name&gt; &lt;remote_url&gt;
git remote remove &lt;remote_name&gt;</code></pre></figure>

<p>This command is used to manage remote repositories it relates to.</p>

<h4 id="stage-changes">Stage Changes</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git add &lt;files&gt;</code></pre></figure>

<p>This command stages files to be commit.</p>

<h4 id="commit-changes">Commit Changes</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git commit
git commit <span class="nt">-m</span> &lt;commit_message&gt;
git commit <span class="nt">-a</span></code></pre></figure>

<p>This commits changes staged using <code class="language-plaintext highlighter-rouge">git add</code>. You also could modify previous commit using <code class="language-plaintext highlighter-rouge">-a</code>.</p>

<h4 id="pull-changes-from-remote-repository">Pull Changes from Remote Repository</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git pull
git pull &lt;remote&gt; &lt;branch&gt;</code></pre></figure>

<p>This command pull commits from remote repository.
If executed on different branch, it will create a merge commit to apply pulled commits.</p>

<h4 id="push-changes-to-remote-repository">Push Changes to Remote Repository</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git push &lt;remote&gt; &lt;branch&gt;</code></pre></figure>

<p>This command pushes commits created locally to the remote repository. This creates new branch if it doesn’t exist.
You could use <code class="language-plaintext highlighter-rouge">--force</code> to rewrite commit history with your local commit history.</p>

<h4 id="status">Status</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git status</code></pre></figure>

<p>This command outputs an overview of your local repository. This includes current branch and uncommited changes if any.</p>

<h4 id="branch">Branch</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git branch &lt;new_branch_name&gt;</code></pre></figure>

<p>This command creates a new branch for current branch. Keep in mind that you need to select the new branch using checkout.</p>

<h4 id="checkout">Checkout</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git checkout &lt;branch_name&gt;
git checkout <span class="nt">-b</span> &lt;new_branch_name&gt;</code></pre></figure>

<p>This command changes the current branch to specified branch.
You could use <code class="language-plaintext highlighter-rouge">-b</code> to create new branch and checkout to the new branch.</p>

<h4 id="log">Log</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git log
git reflog</code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">git log</code> is used to see the history of commits on current branch. 
You could see the code on that commit version using <code class="language-plaintext highlighter-rouge">git checkout &lt;commit_sha&gt;</code>.
<code class="language-plaintext highlighter-rouge">git reflog</code> is used to see the history of git command you used.</p>

<h4 id="stash">Stash</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git stash</code></pre></figure>

<p>This command stashes your uncomitted changes. Useful when you need to pull or change branch.
To unstash, use <code class="language-plaintext highlighter-rouge">git stash apply</code>.</p>

<h4 id="rebase">Rebase</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git rebase &lt;branch_source&gt;</code></pre></figure>

<p>This adds commits added from source branch before repeating your commits on current branch.</p>

<h3 id="tips-and-tricks">Tips and Tricks</h3>

<p>These are tips and tricks that could be used for convenience.</p>

<h4 id="updating-branch-without-merge-commit">Updating Branch without Merge Commit</h4>

<p>Before merging your work into the main remote branch, you often need to update your branch to the latest commit done in main branch.
You could just <code class="language-plaintext highlighter-rouge">git pull origin master</code> to update your branch, but this will create a merge commit which is often 
cumbersome. You could instead utilize <code class="language-plaintext highlighter-rouge">git rebase</code> for this matter. 
This is command I run when I need to update my branch before merge.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git checkout master
git pull origin master
git checkout &lt;branch_name&gt;
git rebase master
git push <span class="nt">--force</span> origin &lt;branch_name&gt;</code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">--force</code> is required here because the commit you create on the branch is repeated and hence creating new SHA for the commit.
This will cause history between local and remote become different and need to be rewritten.</p>

<h4 id="reverting-recent-unpushed-commit">Reverting Recent Unpushed Commit</h4>

<p>When you accidentally commit your changes, you have two choices: Reset to remote state which wastes your current work, or use this command</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git reset HEAD~1 <span class="nt">--soft</span></code></pre></figure>

<p>This will undo the local commit, assuming your last action is committing.</p>

<h4 id="use-gitkeep-for-empty-directories">Use <code class="language-plaintext highlighter-rouge">.gitkeep</code> for Empty Directories</h4>

<p>You couldn’t commit empty directories. But you could place <code class="language-plaintext highlighter-rouge">.gitkeep</code> to keep the empty directory.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Git is a nice version control that has wide features and commands that you might not use.
But once you learn basic of committing, branching, and merging, you will get used to these commands and tricks.</p>]]></content><author><name>hori75</name></author><category term="SoftEngProject" /><summary type="html"><![CDATA[Git is a common version control used on Software Engineering projects.]]></summary></entry></feed>